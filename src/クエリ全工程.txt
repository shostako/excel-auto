let
    ソース = Excel.Workbook(File.Contents("Z:\全社共有\生産管理課\生産実績データ\2506.xlsx"), null, true),
    Sheet1_Sheet = ソース{[Item="Sheet1",Kind="Sheet"]}[Data],
    昇格されたヘッダー数 = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),
    変更された型 = Table.TransformColumnTypes(昇格されたヘッダー数,{{"作業日", type date}, {"担当者コード", Int64.Type}, {"担当者略称", type text}, {"製番", type text}, {"枝番", Int64.Type}, {"指示書№", Int64.Type}, {"希望納期", type date}, {"品番・図番", type text}, {"製作数量", Int64.Type}, {"工順", Int64.Type}, {"工程コード", type text}, {"工程略称", type text}, {"機械コード", type text}, {"機械略称", type text}, {"実績数量", Int64.Type}, {"不良数量", Int64.Type}, {"作業区分", type text}, {"不良区分コード", Int64.Type}, {"不良区分略称", type text}, {"加工時間", Int64.Type}, {"時刻", type any}, {"POP読取日時", type datetime}}),
    削除された空白行 = Table.SelectRows(変更された型, each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {"", null}))),
    フィルターされた行2 = Table.SelectRows(削除された空白行, each ([機械コード] = "" or [機械コード] = "TRRL")),

    日付列追加 = Table.AddColumn(フィルターされた行2, "日付", each
        let
            dateTimeValue = try DateTime.From([時刻]) otherwise null,
            作業日の日付 = [作業日],
            時刻部分 = if dateTimeValue <> null then DateTime.Time(dateTimeValue) else null
        in
        // 時刻部分が取得でき、かつ0時より大きく8時以下の場合
        if 時刻部分 <> null and 時刻部分 > #time(0, 0, 0) and 時刻部分 <= #time(8, 0, 0) then // ★修正点: < を <= に変更
            Date.AddDays(作業日の日付, -1)
        else
            作業日の日付,
    type date),

    削除された他の列 = Table.SelectColumns(日付列追加,{"日付", "担当者略称", "製番", "品番・図番", "工程略称", "実績数量", "不良数量", "作業区分", "不良区分略称", "加工時間"}),
    フィルターされた行 = Table.SelectRows(削除された他の列, each ([作業区分] = "加工完了" or [作業区分] = "段取完了")),
    グループ化された行 = Table.Group(フィルターされた行, {"日付", "製番", "品番・図番", "工程略称", "担当者略称", "作業区分"}, {
        {"実績数量", each List.Sum([実績数量]), type nullable number},
        {"不良数量", each List.Sum([不良数量]), type nullable number},
        {"加工時間", each List.Sum([加工時間]) / 60, type nullable number},
        {
            "不良区分略称",
            each
                let
                    ValidRowsTable = Table.SelectRows(_,
                        (row) => row[不良区分略称] <> null and row[不良区分略称] <> ""
                    ),
                    CombinedTextList = List.Transform(
                        Table.ToRecords(ValidRowsTable),
                        (record) => record[不良区分略称] & Text.From(record[不良数量])
                    )
                in
                    Text.Combine(CombinedTextList, ","),
            type nullable text
        }
    }),
    追加された段取時間列 = Table.AddColumn(グループ化された行, "段取時間", each if [作業区分] = "段取完了" then [加工時間] else 0, type nullable number),
    新加工時間追加 = Table.AddColumn(追加された段取時間列, "新加工時間", each if [作業区分] = "段取完了" then 0 else [加工時間], type nullable number),
    元の列を削除 = Table.RemoveColumns(新加工時間追加, {"加工時間"}),
    列名を変更 = Table.RenameColumns(元の列を削除, {{"新加工時間", "加工時間"}}),
    グループ化された行1 = Table.Group(列名を変更, {"日付", "製番", "品番・図番", "工程略称", "担当者略称"}, {{"実績数量", each List.Sum([実績数量]), type nullable number}, {"不良数量", each List.Sum([不良数量]), type nullable number}, {"加工時間", each List.Sum([加工時間]), type nullable number}, {"段取時間", each List.Sum([段取時間]), type nullable number}, {"不良区分略称", each Text.Combine(List.Distinct(List.Select([不良区分略称], each _ <> null and _ <> "")), ","), type nullable text}}),

    処理済みグループ = Table.Group(グループ化された行1, {"製番", "品番・図番", "工程略称"}, {
        {"ProcessedData", (currentGroupTable as table) =>
            let
                zero実績行 = Table.SelectRows(currentGroupTable, each [実績数量] = 0),
                nonZero実績行 = Table.SelectRows(currentGroupTable, each [実績数量] <> 0),
                resultTable = if Table.IsEmpty(zero実績行) or Table.IsEmpty(nonZero実績行) then
                                nonZero実績行
                            else
                                let
                                    zero不良数量合計 = List.Sum(List.RemoveNulls(zero実績行[不良数量])),
                                    zero不良区分リストRaw = List.Combine(
                                        List.Transform(zero実績行[不良区分略称], (txt) =>
                                            if txt = null or txt = "" then {} else Text.Split(txt, ",")
                                        )
                                    ),
                                    zero不良区分リスト = List.Distinct(List.Select(zero不良区分リストRaw, each _ <> null and _ <> "")),
                                    indexedNonZero実績行 = Table.AddIndexColumn(nonZero実績行, "__SortIndex", 0, 1, Int64.Type),
                                    targetRowRecord = Table.First(Table.Sort(indexedNonZero実績行, {{"実績数量", Order.Descending}, {"__SortIndex", Order.Ascending}})),
                                    targetRowIndex = Record.Field(targetRowRecord, "__SortIndex"),
                                    transformedNonZero実績行 = Table.FromRecords(
                                        List.Transform(Table.ToRecords(indexedNonZero実績行), (row) =>
                                            if Record.Field(row, "__SortIndex") = targetRowIndex then
                                                Record.TransformFields(row, {
                                                    {"不良数量", each (_ ?? 0) + (zero不良数量合計 ?? 0)},
                                                    {"不良区分略称", (currentVal) =>
                                                        let
                                                            currentListRaw = if currentVal = null or currentVal = "" then {} else Text.Split(currentVal, ","),
                                                            currentList = List.Distinct(List.Select(currentListRaw, each _ <> null and _ <> "")),
                                                            combinedList = List.Distinct(List.Combine({currentList, zero不良区分リスト}))
                                                        in Text.Combine(combinedList, ",")
                                                    }
                                                })
                                            else
                                                row
                                        )
                                    ),
                                    result = Table.RemoveColumns(transformedNonZero実績行, {"__SortIndex"})
                                in
                                    result
            in
                resultTable, type table}
    }),

    groupingKeysOf処理済みグループ = {"製番", "品番・図番", "工程略称"},
    columnsInProcessedData = Table.ColumnNames(グループ化された行1),
    columnsToExpand = List.RemoveItems(columnsInProcessedData, groupingKeysOf処理済みグループ),

    最終結果テーブル展開前 = Table.ExpandTableColumn(処理済みグループ, "ProcessedData", columnsToExpand),
    並べ替えられた列 = Table.ReorderColumns(最終結果テーブル展開前,{"日付", "製番", "品番・図番", "工程略称", "担当者略称", "実績数量", "不良数量", "加工時間", "段取時間", "不良区分略称"}),
    #"名前が変更された列 " = Table.RenameColumns(並べ替えられた列,{{"品番・図番", "品番"}, {"工程略称", "工程"}, {"担当者略称", "作業者"}, {"加工時間", "稼働時間"}, {"不良区分略称", "不良区分"}, {"実績数量", "実績"}, {"不良数量", "不良"}}),

    // --- ここから追加の処理 ---
    品番除外リスト = {"60050", "60080", "28030", "28040", "28200", "47030", "52080", "52090", "52170", "52180", "52300", "52310", "52810", "52870", "52R00", "53R00", "58011", "58020", "58030", "58040", "58050", "58060", "58070", "58080", "58100", "58110", "58811", "58821", "58221", "58830", "55Z00", "55Z10", "59S00", "59S10", "68P01", "74P00", "74M00", "83S01"},
    
    調整済み行 = List.Transform(
        Table.ToRecords(#"名前が変更された列 "), // 直前のステップを参照
        (row) =>
            let
                current品番 = Record.FieldOrDefault(row, "品番", ""), // 品番がnullの場合も考慮
                current実績 = Record.FieldOrDefault(row, "実績"),
                current不良 = Record.FieldOrDefault(row, "不良"),
                
                // current品番が品番除外リストのいずれかの文字列を含むかどうかを判定
                isExcluded = List.AnyTrue(List.Transform(品番除外リスト, (exclusionItem) => Text.Contains(current品番, exclusionItem))),
                
                // 条件に基づいて新しい値を決定
                new実績 = if not isExcluded and current実績 <> null then current実績 / 2 else current実績,
                new不良 = if not isExcluded and current不良 <> null then current不良 / 2 else current不良
            in
                // レコードの「実績」と「不良」フィールドを更新
                Record.TransformFields(row, {
                    {"実績", (_) => new実績},
                    {"不良", (_) => new不良}
                })
    ),
    
    // 更新されたレコードリストから新しいテーブルを作成
    最終調整済みテーブル = Table.FromRecords(調整済み行, Value.Type(#"名前が変更された列 ")),
    フィルターされた行1 = Table.SelectRows(最終調整済みテーブル, each ([日付] <> null)) 
    // --- 追加の処理ここまで ---

in
    フィルターされた行1 // 最終結果として新しいステップ名を返す