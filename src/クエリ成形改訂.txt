let
    // ===== データソース読み込み =====
    ソース = Excel.Workbook(File.Contents("Z:\全社共有\生産管理課\生産実績データ\2506.xlsx"), null, true),
    Sheet1_Sheet = ソース{[Item="Sheet1",Kind="Sheet"]}[Data],
    昇格されたヘッダー数 = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),
    
    // ===== データ型変換 =====
    変更された型 = Table.TransformColumnTypes(昇格されたヘッダー数,{
        {"作業日", type date}, 
        {"担当者コード", Int64.Type}, 
        {"担当者略称", type text}, 
        {"製番", type text}, 
        {"枝番", Int64.Type}, 
        {"指示書№", Int64.Type}, 
        {"希望納期", type date}, 
        {"品番・図番", type text}, 
        {"製作数量", Int64.Type}, 
        {"工順", Int64.Type}, 
        {"工程コード", type text}, 
        {"工程略称", type text}, 
        {"機械コード", type text}, 
        {"機械略称", type text}, 
        {"実績数量", Int64.Type}, 
        {"不良数量", Int64.Type}, 
        {"作業区分", type text}, 
        {"不良区分コード", Int64.Type}, 
        {"不良区分略称", type text}, 
        {"加工時間", Int64.Type}, 
        {"時刻", type any}, 
        {"POP読取日時", type datetime}
    }),
    
    // ===== 空白行削除 =====
    削除された空白行 = Table.SelectRows(変更された型, each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {"", null}))),

    // ===== 日付列追加（夜勤対応：0時-8時のデータは前日扱い） =====
    日付列追加 = Table.AddColumn(削除された空白行, "日付", each
        let
            dateTimeValue = try DateTime.From([時刻]) otherwise null,
            作業日の日付 = [作業日],
            時刻部分 = if dateTimeValue <> null then DateTime.Time(dateTimeValue) else null
        in
        // 時刻部分が取得でき、かつ0時より大きく8時以下の場合は前日扱い
        if 時刻部分 <> null and 時刻部分 > #time(0, 0, 0) and 時刻部分 <= #time(8, 0, 0) then
            Date.AddDays(作業日の日付, -1)
        else
            作業日の日付,
    type date),

    // ===== 必要列の選択 =====
    削除された他の列 = Table.SelectColumns(日付列追加,{
        "日付", "品番・図番", "機械コード", "実績数量", "不良数量", 
        "作業区分", "不良区分略称", "加工時間", "時刻"
    }),
    
    // ===== 基本フィルタリング（加工完了・段取完了のみ、空機械コード・TRRL除外） =====
    フィルターされた行 = Table.SelectRows(削除された他の列, each 
        ([作業区分] = "加工完了" or [作業区分] = "段取完了") 
        and ([機械コード] <> "" and [機械コード] <> "TRRL")
    ),
    
    // ===== 重複削除処理（修正版） =====
    重複削除済み行 = let
        // SS系機械（SS01-SS05）とそれ以外に分離
        SS行 = Table.SelectRows(フィルターされた行, each 
            ([機械コード] = "SS01" or [機械コード] = "SS02" or 
             [機械コード] = "SS03" or [機械コード] = "SS04" or [機械コード] = "SS05")
        ),
        非SS行 = Table.SelectRows(フィルターされた行, each 
            ([機械コード] <> "SS01" and [機械コード] <> "SS02" and 
             [機械コード] <> "SS03" and [機械コード] <> "SS04" and [機械コード] <> "SS05")
        ),
        
        // SS行の重複削除：機械コード・実績数量・時刻でグループ化
        // ※同一機械・同一数量・同一時刻で複数品番がある場合、代表品番を残し、統合品番列を追加
        重複削除済みSS行 = Table.FromRecords(
            List.Transform(
                // グループ化：機械コード + 実績数量 + 時刻
                Table.Group(SS行, {"機械コード", "実績数量", "時刻"}, {{"GroupData", each _, type table}})[GroupData],
                each 
                    let
                        グループテーブル = _,
                        // グループ内の全品番を昇順ソートして取得
                        品番リスト = Table.Column(Table.Sort(グループテーブル, {{"品番・図番", Order.Ascending}}), "品番・図番"),
                        // 品番を"|"で連結して統合品番を作成
                        統合品番 = Text.Combine(品番リスト, "|"),
                        // 代表レコード（先頭1件）を取得
                        代表レコード = Table.First(Table.Sort(グループテーブル, {{"品番・図番", Order.Ascending}})),
                        // 統合品番列を追加（品番・図番は代表品番のまま保持）
                        最終レコード = Record.AddField(代表レコード, "統合品番", 統合品番)
                    in
                        最終レコード
            )
        ),
        
        // SS行（重複削除済み）と非SS行を結合
        // 非SS行には統合品番列がないため、品番・図番をコピーして統合品番列を追加
        非SS行_統合品番追加 = Table.AddColumn(非SS行, "統合品番", each [#"品番・図番"]),
        結合結果 = Table.Combine({非SS行_統合品番追加, 重複削除済みSS行})
    in
        結合結果,
    
    // ===== メイン集計処理 =====
    // グループ化：日付 + 品番 + 機械コード単位で各種数値を集計
    統合グループ化 = Table.Group(重複削除済み行, {"日付", "品番・図番", "機械コード"}, {
        // 実績数量の合計
        {"実績数量", each List.Sum([実績数量]), type nullable number},
        // 不良数量の合計
        {"不良数量", each List.Sum([不良数量]), type nullable number},
        // 段取時間：「段取完了」の加工時間合計（秒→分変換）
        {"段取時間", each 
            let
                段取時間計算値 = List.Sum(List.Transform(
                    Table.SelectRows(_, each [作業区分] = "段取完了")[加工時間], 
                    each _ / 60
                ))
            in
                if 段取時間計算値 = null then 0 else 段取時間計算値, 
            type nullable number
        },
        // 稼働時間：「加工完了」の加工時間合計（秒→分変換）
        {"稼働時間", each List.Sum(List.Transform(
            Table.SelectRows(_, each [作業区分] = "加工完了")[加工時間], 
            each _ / 60
        )), type nullable number},
        // 不良区分の統合：「不良区分略称 + 不良数量」をカンマ区切りで連結
        {
            "不良区分",
            each
                let
                    ValidRowsTable = Table.SelectRows(_,
                        (row) => row[不良区分略称] <> null and row[不良区分略称] <> ""
                    ),
                    CombinedTextList = List.Transform(
                        Table.ToRecords(ValidRowsTable),
                        (record) => record[不良区分略称] & Text.From(record[不良数量])
                    )
                in
                    Text.Combine(CombinedTextList, ","),
            type nullable text
        },
        // 統合品番の保持：グループ内の最初の統合品番を取得
        {"統合品番", each List.First([#"統合品番"]), type nullable text}
    }),

    // ===== 実績数量0行のマージ処理 =====
    // 品番・機械コード単位で、実績数量0の行の不良情報を実績数量>0の行にマージ
    処理済みグループ = Table.Group(統合グループ化, {"品番・図番", "機械コード"}, {
        {"ProcessedData", (currentGroupTable as table) =>
            let
                // 実績数量0の行と0以外の行に分離
                zero実績行 = Table.SelectRows(currentGroupTable, each [実績数量] = 0),
                nonZero実績行 = Table.SelectRows(currentGroupTable, each [実績数量] <> 0),
                
                // 実績数量0行が存在しない、または実績数量>0行が存在しない場合はそのまま
                resultTable = if Table.IsEmpty(zero実績行) or Table.IsEmpty(nonZero実績行) then
                                nonZero実績行
                            else
                                let
                                    // 実績数量0行の不良数量・不良区分を集計
                                    zero不良数量合計 = List.Sum(List.RemoveNulls(zero実績行[不良数量])),
                                    zero不良区分リストRaw = List.Combine(
                                        List.Transform(zero実績行[不良区分], (txt) =>
                                            if txt = null or txt = "" then {} else Text.Split(txt, ",")
                                        )
                                    ),
                                    zero不良区分リスト = List.Distinct(List.Select(zero不良区分リストRaw, each _ <> null and _ <> "")),
                                    
                                    // 実績数量最大の行を特定（同値の場合は最初の行）
                                    indexedNonZero実績行 = Table.AddIndexColumn(nonZero実績行, "__SortIndex", 0, 1, Int64.Type),
                                    targetRowRecord = Table.First(Table.Sort(indexedNonZero実績行, {
                                        {"実績数量", Order.Descending}, 
                                        {"__SortIndex", Order.Ascending}
                                    })),
                                    targetRowIndex = Record.Field(targetRowRecord, "__SortIndex"),
                                    
                                    // 対象行に不良数量・不良区分をマージ
                                    transformedNonZero実績行 = Table.FromRecords(
                                        List.Transform(Table.ToRecords(indexedNonZero実績行), (row) =>
                                            if Record.Field(row, "__SortIndex") = targetRowIndex then
                                                Record.TransformFields(row, {
                                                    {"不良数量", each (_ ?? 0) + (zero不良数量合計 ?? 0)},
                                                    {"不良区分", (currentVal) =>
                                                        let
                                                            currentListRaw = if currentVal = null or currentVal = "" then {} else Text.Split(currentVal, ","),
                                                            currentList = List.Distinct(List.Select(currentListRaw, each _ <> null and _ <> "")),
                                                            combinedList = List.Distinct(List.Combine({currentList, zero不良区分リスト}))
                                                        in Text.Combine(combinedList, ",")
                                                    }
                                                })
                                            else
                                                row
                                        )
                                    ),
                                    result = Table.RemoveColumns(transformedNonZero実績行, {"__SortIndex"})
                                in
                                    result
            in
                resultTable, type table}
    }),

    // ===== 最終テーブル構築 =====
    groupingKeysOf処理済みグループ = {"品番・図番", "機械コード"},
    columnsInProcessedData = Table.ColumnNames(統合グループ化),
    columnsToExpand = List.RemoveItems(columnsInProcessedData, groupingKeysOf処理済みグループ),

    // ProcessedDataテーブル列を展開
    最終結果テーブル展開前 = Table.ExpandTableColumn(処理済みグループ, "ProcessedData", columnsToExpand),
    // 日付がnullの行を除外
    フィルターされた行1 = Table.SelectRows(最終結果テーブル展開前, each ([日付] <> null)),
    
    // 品番・図番列を統合品番で置き換え（重複削除情報を最終出力に反映）
    // 古い品番・図番列を削除 → 統合品番列を品番・図番にリネーム
    品番列削除 = Table.RemoveColumns(フィルターされた行1, {"品番・図番"}),
    統合品番適用 = Table.RenameColumns(品番列削除, {{"統合品番", "品番・図番"}}),
    
    // 列順序調整（ここが問題だった箇所）
    並べ替えられた列 = Table.ReorderColumns(統合品番適用,{
        "日付", "品番・図番", "機械コード", "実績数量", "不良数量", "稼働時間", "段取時間", "不良区分"
    }),
    // 列名変更（表示用）
    列名変更 = Table.RenameColumns(並べ替えられた列,{
        {"品番・図番", "品番"}, 
        {"機械コード", "機械"}, 
        {"実績数量", "実績"}, 
        {"不良数量", "不良"}
    })

in
    列名変更